<project name="DeepMutation" default="dist" basedir=".">
    <description>
        Build file adapted from https://ant.apache.org/manual/using.html
    </description>
    <!-- set global properties for this build -->
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>
    <property name="entry.point" value="edu.wm.cs.mutation.DeepMutation"/>
    <property name="build.c" location="build/c"/>
    <property name="c.path" location="${src}/main/c"/>
    <property name="c.lib.out" location="${dist}/libWrapper.so"/>

    <!-- https://stackoverflow.com/a/1892936 -->
    <path id="build.classpath">
        <fileset dir="${basedir}">
            <include name="lib/*.jar"/>
        </fileset>
    </path>

    <pathconvert property="manifest.classpath" pathsep=" ">
      <path refid="build.classpath"/>
      <mapper>
        <chainedmapper>
           <flattenmapper/>
           <globmapper from="*.jar" to="../lib/*.jar"/>
        </chainedmapper>
      </mapper>
    </pathconvert>
    <!-- end -->

    <!-- test if javah is supported (JDK < 1.8) -->
    <condition property="has.javah">
        <or>
            <equals arg1="${ant.java.version}" arg2="4"></equals>
            <equals arg1="${ant.java.version}" arg2="5"></equals>
            <equals arg1="${ant.java.version}" arg2="6"></equals>
            <equals arg1="${ant.java.version}" arg2="7"></equals>
        </or>
    </condition>

    <!-- Compile the Java code from ${src} into ${build} with javac -->
    <target name="with.javac" depends="init,compile.javac,make"
            description="compile the source with javac"/>

    <!-- Compile the Java code from ${src} into ${build} with javah -->
    <target name="with.javah" depends="init,compile.javah,jni.javah,make"
            description="compile the source with javah"/>

    <!-- Helpers -->
    <target name="init">
        <tstamp/>
        <mkdir dir="${build}"/>
        <mkdir dir="${build.c}"/>
        <mkdir dir="${dist}"/>
    </target>

    <target name="compile.javac" unless="has.javah">
        <javac includeantruntime="false" classpathref="build.classpath"
               srcdir="${src}/main" destdir="${build}"
               nativeHeaderDir="${build.c}"/>
       <first id="wrapper.header">
           <fileset dir="${build.c}" includes="*_Wrapper.h"/>
       </first>
       <exec executable="mv" failonerror="true">
           <arg value="${toString:wrapper.header}"/>
           <arg value="${build.c}/Wrapper.h"/>
       </exec>
    </target>

    <target name="compile.javah" if="has.javah">
        <javac includeantruntime="false" classpathref="build.classpath"
               srcdir="${src}/main" destdir="${build}"/>
    </target>

    <target name="jni.javah" if="has.javah">
        <javah outputFile="${build.c}/Wrapper.h" classpath="build">
            <class name="edu.wm.cs.mutation.tester.Wrapper"/>
        </javah>
    </target>

    <target name="make">
        <exec executable="make" failonerror="true">
            <arg value="-f"/>
            <arg value="jni/Makefile"/>
            <arg value="C_PATH=${c.path}"/>
            <arg value="HEADER_PATH=${build.c}"/>
            <arg value="LIB_OUT=${c.lib.out}"/>
        </exec>
    </target>

    <target name="dist" depends="with.javac,with.javah"
            description="generate the distribution">

        <jar jarfile="${dist}/DeepMutation.jar" basedir="${build}">
            <manifest>
                <attribute name="Main-Class" value="${entry.point}"/>
                <attribute name="Class-Path" value="${manifest.classpath}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean"
            description="clean up">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
</project>
